/* tslint:disable */
/* eslint-disable */
/**
 * Tekton
 * Tekton Pipeline
 *
 * The version of the OpenAPI document: v0.17.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// import {
// 	DUMMY_BASE_URL,
// 	assertParamExists,
// 	setApiKeyToObject,
// 	setBasicAuthToObject,
// 	setBearerAuthToObject,
// 	setOAuthToObject,
// 	setSearchParams,
// 	serializeDataIfNeeded,
// 	toPathString,
// 	createRequestFunction,
// } from './common';
// import type { RequestArgs } from './test/base';
// @ts-ignore
// import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './test/base';
import {
	Affinity,
	CSIVolumeSource,
	ConfigMapVolumeSource,
	ContainerPort,
	ContainerStateRunning,
	ContainerStateTerminated,
	ContainerStateWaiting,
	EmptyDirVolumeSource,
	EnvFromSource,
	EnvVar,
	HostAlias,
	Lifecycle,
	LocalObjectReference,
	PersistentVolumeClaim,
	PersistentVolumeClaimVolumeSource,
	PodDNSConfig,
	PodSecurityContext,
	Probe,
	ProjectedVolumeSource,
	ResourceRequirements,
	SecretVolumeSource,
	SecurityContext,
	Toleration,
	TopologySpreadConstraint,
	Volume,
	VolumeDevice,
	VolumeMount,
} from 'kubernetes-models/v1';
import { IIoK8sApimachineryPkgApisMetaV1Time } from '@kubernetes-models/apimachinery/apis/meta/v1/IIoK8sApimachineryPkgApisMetaV1Time';
type Duration = string;
/**
 * AffinityAssistantTemplate holds pod specific configuration and is a subset of the generic pod Template
 * @export
 * @interface PodAffinityAssistantTemplate
 */
export interface PodAffinityAssistantTemplate {
	/**
	 * ImagePullSecrets gives the name of the secret used by the pod to pull the image if specified
	 * @type {Array<LocalObjectReference>}
	 * @memberof PodAffinityAssistantTemplate
	 */
	imagePullSecrets?: Array<LocalObjectReference>;
	/**
	 * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node\'s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	 * @type {{ [key: string]: string; }}
	 * @memberof PodAffinityAssistantTemplate
	 */
	nodeSelector?: { [key: string]: string };
	/**
	 * If specified, the pod\'s tolerations.
	 * @type {Array<Toleration>}
	 * @memberof PodAffinityAssistantTemplate
	 */
	tolerations?: Array<Toleration>;
}
/**
 * Template holds pod specific configuration
 * @export
 * @interface PodTemplate
 */
export interface PodTemplate {
	/**
	 *
	 * @type {Affinity}
	 * @memberof PodTemplate
	 */
	affinity?: Affinity;
	/**
	 * AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted.
	 * @type {boolean}
	 * @memberof PodTemplate
	 */
	automountServiceAccountToken?: boolean;
	/**
	 *
	 * @type {PodDNSConfig}
	 * @memberof PodTemplate
	 */
	dnsConfig?: PodDNSConfig;
	/**
	 * Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are \'ClusterFirst\', \'Default\' or \'None\'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
	 * @type {string}
	 * @memberof PodTemplate
	 */
	dnsPolicy?: string;
	/**
	 * EnableServiceLinks indicates whether information about services should be injected into pod\'s environment variables, matching the syntax of Docker links. Optional: Defaults to true.
	 * @type {boolean}
	 * @memberof PodTemplate
	 */
	enableServiceLinks?: boolean;
	/**
	 * List of environment variables that can be provided to the containers belonging to the pod.
	 * @type {Array<EnvVar>}
	 * @memberof PodTemplate
	 */
	env?: Array<EnvVar>;
	/**
	 * HostAliases is an optional list of hosts and IPs that will be injected into the pod\'s hosts file if specified. This is only valid for non-hostNetwork pods.
	 * @type {Array<HostAlias>}
	 * @memberof PodTemplate
	 */
	hostAliases?: Array<HostAlias>;
	/**
	 * HostNetwork specifies whether the pod may use the node network namespace
	 * @type {boolean}
	 * @memberof PodTemplate
	 */
	hostNetwork?: boolean;
	/**
	 * ImagePullSecrets gives the name of the secret used by the pod to pull the image if specified
	 * @type {Array<LocalObjectReference>}
	 * @memberof PodTemplate
	 */
	imagePullSecrets?: Array<LocalObjectReference>;
	/**
	 * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node\'s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	 * @type {{ [key: string]: string; }}
	 * @memberof PodTemplate
	 */
	nodeSelector?: { [key: string]: string };
	/**
	 * If specified, indicates the pod\'s priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
	 * @type {string}
	 * @memberof PodTemplate
	 */
	priorityClassName?: string;
	/**
	 * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod. If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.
	 * @type {string}
	 * @memberof PodTemplate
	 */
	runtimeClassName?: string;
	/**
	 * SchedulerName specifies the scheduler to be used to dispatch the Pod
	 * @type {string}
	 * @memberof PodTemplate
	 */
	schedulerName?: string;
	/**
	 *
	 * @type {PodSecurityContext}
	 * @memberof PodTemplate
	 */
	securityContext?: PodSecurityContext;
	/**
	 * If specified, the pod\'s tolerations.
	 * @type {Array<Toleration>}
	 * @memberof PodTemplate
	 */
	tolerations?: Array<Toleration>;
	/**
	 * TopologySpreadConstraints controls how Pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains.
	 * @type {Array<TopologySpreadConstraint>}
	 * @memberof PodTemplate
	 */
	topologySpreadConstraints?: Array<TopologySpreadConstraint>;
	/**
	 * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
	 * @type {Array<Volume>}
	 * @memberof PodTemplate
	 */
	volumes?: Array<Volume>;
}
/**
 * TaskRunStepArtifact represents an artifact produced or used by a step within a task run. It directly uses the Artifact type for its structure.
 * @export
 * @interface Artifact
 */
export interface Artifact {
	/**
	 *
	 * @type {string}
	 * @memberof Artifact
	 */
	name?: string;
	/**
	 * The artifact\'s identifying category name
	 * @type {Array<ArtifactValue>}
	 * @memberof Artifact
	 */
	values?: Array<ArtifactValue>;
}
/**
 * ArtifactValue represents a specific value or data element within an Artifact.
 * @export
 * @interface ArtifactValue
 */
export interface ArtifactValue {
	/**
	 *
	 * @type {{ [key: string]: string; }}
	 * @memberof ArtifactValue
	 */
	digest?: { [key: string]: string };
	/**
	 * Algorithm-specific digests for verifying the content (e.g., SHA256)
	 * @type {string}
	 * @memberof ArtifactValue
	 */
	uri?: string;
}
/**
 * Artifacts represents the collection of input and output artifacts associated with a task run or a similar process. Artifacts in this context are units of data or resources that the process either consumes as input or produces as output.
 * @export
 * @interface Artifacts
 */
export interface Artifacts {
	/**
	 *
	 * @type {Array<Artifact>}
	 * @memberof Artifacts
	 */
	inputs?: Array<Artifact>;
	/**
	 *
	 * @type {Array<Artifact>}
	 * @memberof Artifacts
	 */
	outputs?: Array<Artifact>;
}
/**
 * ChildStatusReference is used to point to the statuses of individual TaskRuns and Runs within this PipelineRun.
 * @export
 * @interface ChildStatusReference
 */
export interface ChildStatusReference {
	/**
	 *
	 * @type {string}
	 * @memberof ChildStatusReference
	 */
	apiVersion?: string;
	/**
	 * DisplayName is a user-facing name of the pipelineTask that may be used to populate a UI.
	 * @type {string}
	 * @memberof ChildStatusReference
	 */
	displayName?: string;
	/**
	 *
	 * @type {string}
	 * @memberof ChildStatusReference
	 */
	kind?: string;
	/**
	 * Name is the name of the TaskRun or Run this is referencing.
	 * @type {string}
	 * @memberof ChildStatusReference
	 */
	name?: string;
	/**
	 * PipelineTaskName is the name of the PipelineTask this is referencing.
	 * @type {string}
	 * @memberof ChildStatusReference
	 */
	pipelineTaskName?: string;
	/**
	 * WhenExpressions is the list of checks guarding the execution of the PipelineTask
	 * @type {Array<WhenExpression>}
	 * @memberof ChildStatusReference
	 */
	whenExpressions?: Array<WhenExpression>;
}
/**
 * EmbeddedTask is used to define a Task inline within a Pipeline\'s PipelineTasks.
 * @export
 * @interface EmbeddedTask
 */
export interface EmbeddedTask {
	/**
	 *
	 * @type {string}
	 * @memberof EmbeddedTask
	 */
	apiVersion?: string;
	/**
	 * Description is a user-facing description of the task that may be used to populate a UI.
	 * @type {string}
	 * @memberof EmbeddedTask
	 */
	description?: string;
	/**
	 * DisplayName is a user-facing name of the task that may be used to populate a UI.
	 * @type {string}
	 * @memberof EmbeddedTask
	 */
	displayName?: string;
	/**
	 *
	 * @type {string}
	 * @memberof EmbeddedTask
	 */
	kind?: string;
	/**
	 *
	 * @type {PipelineTaskMetadata}
	 * @memberof EmbeddedTask
	 */
	metadata?: PipelineTaskMetadata;
	/**
	 * Params is a list of input parameters required to run the task. Params must be supplied as inputs in TaskRuns unless they declare a default value.
	 * @type {Array<ParamSpec>}
	 * @memberof EmbeddedTask
	 */
	params?: Array<ParamSpec>;
	/**
	 * Results are values that this Task can output
	 * @type {Array<TaskResult>}
	 * @memberof EmbeddedTask
	 */
	results?: Array<TaskResult>;
	/**
	 * Sidecars are run alongside the Task\'s step containers. They begin before the steps start and end after the steps complete.
	 * @type {Array<Sidecar>}
	 * @memberof EmbeddedTask
	 */
	sidecars?: Array<Sidecar>;
	/**
	 *
	 * @type {K8sIoApimachineryPkgRuntimeRawExtension}
	 * @memberof EmbeddedTask
	 */
	spec?: K8sIoApimachineryPkgRuntimeRawExtension;
	/**
	 *
	 * @type {StepTemplate}
	 * @memberof EmbeddedTask
	 */
	stepTemplate?: StepTemplate;
	/**
	 * Steps are the steps of the build; each step is run sequentially with the source mounted into /workspace.
	 * @type {Array<Step>}
	 * @memberof EmbeddedTask
	 */
	steps?: Array<Step>;
	/**
	 * Volumes is a collection of volumes that are available to mount into the steps of the build.
	 * @type {Array<Volume>}
	 * @memberof EmbeddedTask
	 */
	volumes?: Array<Volume>;
	/**
	 * Workspaces are the volumes that this Task requires.
	 * @type {Array<WorkspaceDeclaration>}
	 * @memberof EmbeddedTask
	 */
	workspaces?: Array<WorkspaceDeclaration>;
}
/**
 * IncludeParams allows passing in a specific combinations of Parameters into the Matrix.
 * @export
 * @interface IncludeParams
 */
export interface IncludeParams {
	/**
	 * Name the specified combination
	 * @type {string}
	 * @memberof IncludeParams
	 */
	name?: string;
	/**
	 * Params takes only `Parameters` of type `\"string\"` The names of the `params` must match the names of the `params` in the underlying `Task`
	 * @type {Array<Param>}
	 * @memberof IncludeParams
	 */
	params?: Array<Param>;
}
/**
 * Matrix is used to fan out Tasks in a Pipeline
 * @export
 * @interface Matrix
 */
export interface Matrix {
	/**
	 * Include is a list of IncludeParams which allows passing in specific combinations of Parameters into the Matrix.
	 * @type {Array<IncludeParams>}
	 * @memberof Matrix
	 */
	include?: Array<IncludeParams>;
	/**
	 * Params is a list of parameters used to fan out the pipelineTask Params takes only `Parameters` of type `\"array\"` Each array element is supplied to the `PipelineTask` by substituting `params` of type `\"string\"` in the underlying `Task`. The names of the `params` in the `Matrix` must match the names of the `params` in the underlying `Task` that they will be substituting.
	 * @type {Array<Param>}
	 * @memberof Matrix
	 */
	params?: Array<Param>;
}
/**
 * Param declares an ParamValues to use for the parameter called name.
 * @export
 * @interface Param
 */
export interface Param {
	/**
	 *
	 * @type {string}
	 * @memberof Param
	 */
	name: string;
	/**
	 *
	 * @type {ParamValue}
	 * @memberof Param
	 */
	value: ParamValue;
}
/**
 * ParamSpec defines arbitrary parameters needed beyond typed inputs (such as resources). Parameter values are provided by users as inputs on a TaskRun or PipelineRun.
 * @export
 * @interface ParamSpec
 */
export interface ParamSpec {
	/**
	 *
	 * @type {ParamValue}
	 * @memberof ParamSpec
	 */
	default?: ParamValue;
	/**
	 * Description is a user-facing description of the parameter that may be used to populate a UI.
	 * @type {string}
	 * @memberof ParamSpec
	 */
	description?: string;
	/**
	 * Enum declares a set of allowed param input values for tasks/pipelines that can be validated. If Enum is not set, no input validation is performed for the param.
	 * @type {Array<string>}
	 * @memberof ParamSpec
	 */
	enum?: Array<string>;
	/**
	 * Name declares the name by which a parameter is referenced.
	 * @type {string}
	 * @memberof ParamSpec
	 */
	name: string;
	/**
	 * Properties is the JSON Schema properties to support key-value pairs parameter.
	 * @type {{ [key: string]: PropertySpec; }}
	 * @memberof ParamSpec
	 */
	properties?: { [key: string]: PropertySpec };
	/**
	 * Type is the user-specified type of the parameter. The possible types are currently \"string\", \"array\" and \"object\", and \"string\" is the default.
	 * @type {string}
	 * @memberof ParamSpec
	 */
	type?: string;
}
/**
 * ResultValue is a type alias of ParamValue
 * @export
 * @interface ParamValue
 */
export interface ParamValue {
	/**
	 *
	 * @type {Array<string>}
	 * @memberof ParamValue
	 */
	ArrayVal: Array<string>;
	/**
	 *
	 * @type {{ [key: string]: string; }}
	 * @memberof ParamValue
	 */
	ObjectVal: { [key: string]: string };
	/**
	 * Represents the stored type of ParamValues.
	 * @type {string}
	 * @memberof ParamValue
	 */
	StringVal: string;
	/**
	 *
	 * @type {string}
	 * @memberof ParamValue
	 */
	Type: string;
}

export interface ObjectMeta {
	name?: string;
	annotations?: {
		[key: string]: string;
	};
	labels?: {
		[key: string]: string;
	};
	namespace?: string;
	finalizers?: string[];
}
/**
 * Pipeline describes a list of Tasks to execute. It expresses how outputs of tasks feed into inputs of subsequent tasks.
 * @export
 * @interface Pipeline
 */
export interface Pipeline {
	/**
	 * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	 * @type {string}
	 * @memberof Pipeline
	 */
	apiVersion?: string;
	/**
	 * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	 * @type {string}
	 * @memberof Pipeline
	 */
	kind?: string;
	/**
	 *
	 * @type {ObjectMeta}
	 * @memberof Pipeline
	 */
	metadata?: ObjectMeta;
	/**
	 *
	 * @type {PipelineSpec}
	 * @memberof Pipeline
	 */
	spec?: PipelineSpec;
}
/**
 * PipelineList contains a list of Pipeline
 * @export
 * @interface PipelineList
 */
export interface PipelineList {
	/**
	 * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	 * @type {string}
	 * @memberof PipelineList
	 */
	apiVersion?: string;
	/**
	 *
	 * @type {Array<Pipeline>}
	 * @memberof PipelineList
	 */
	items: Array<Pipeline>;
	/**
	 * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	 * @type {string}
	 * @memberof PipelineList
	 */
	kind?: string;
	/**
	 *
	 * @type {ListMeta}
	 * @memberof PipelineList
	 */
	metadata?: ListMeta;
}

export interface ListMeta {
	continue?: string;
	resourceVersion?: string;
}
/**
 * PipelineRef can be used to refer to a specific instance of a Pipeline.
 * @export
 * @interface PipelineRef
 */
export interface PipelineRef {
	/**
	 * API version of the referent
	 * @type {string}
	 * @memberof PipelineRef
	 */
	apiVersion?: string;
	/**
	 * Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	 * @type {string}
	 * @memberof PipelineRef
	 */
	name?: string;
}
/**
 * PipelineResult used to describe the results of a pipeline
 * @export
 * @interface PipelineResult
 */
export interface PipelineResult {
	/**
	 * Description is a human-readable description of the result
	 * @type {string}
	 * @memberof PipelineResult
	 */
	description?: string;
	/**
	 * Name the given name
	 * @type {string}
	 * @memberof PipelineResult
	 */
	name: string;
	/**
	 * Type is the user-specified type of the result. The possible types are \'string\', \'array\', and \'object\', with \'string\' as the default. \'array\' and \'object\' types are alpha features.
	 * @type {string}
	 * @memberof PipelineResult
	 */
	type?: string;
	/**
	 *
	 * @type {ParamValue}
	 * @memberof PipelineResult
	 */
	value: ParamValue;
}
/**
 * PipelineRun represents a single execution of a Pipeline. PipelineRuns are how the graph of Tasks declared in a Pipeline are executed; they specify inputs to Pipelines such as parameter values and capture operational aspects of the Tasks execution such as service account and tolerations. Creating a PipelineRun creates TaskRuns for Tasks in the referenced Pipeline.
 * @export
 * @interface PipelineRun
 */
export interface PipelineRun {
	/**
	 * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	 * @type {string}
	 * @memberof PipelineRun
	 */
	apiVersion?: string;
	/**
	 * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	 * @type {string}
	 * @memberof PipelineRun
	 */
	kind?: string;
	/**
	 *
	 * @type {ObjectMeta}
	 * @memberof PipelineRun
	 */
	metadata?: ObjectMeta;
	/**
	 *
	 * @type {PipelineRunSpec}
	 * @memberof PipelineRun
	 */
	spec?: PipelineRunSpec;
	/**
	 *
	 * @type {PipelineRunStatus}
	 * @memberof PipelineRun
	 */
	status?: PipelineRunStatus;
}
/**
 * PipelineRunList contains a list of PipelineRun
 * @export
 * @interface PipelineRunList
 */
export interface PipelineRunList {
	/**
	 * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	 * @type {string}
	 * @memberof PipelineRunList
	 */
	apiVersion?: string;
	/**
	 *
	 * @type {Array<PipelineRun>}
	 * @memberof PipelineRunList
	 */
	items?: Array<PipelineRun>;
	/**
	 * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	 * @type {string}
	 * @memberof PipelineRunList
	 */
	kind?: string;
	/**
	 *
	 * @type {ListMeta}
	 * @memberof PipelineRunList
	 */
	metadata?: ListMeta;
}
/**
 * PipelineRunResult used to describe the results of a pipeline
 * @export
 * @interface PipelineRunResult
 */
export interface PipelineRunResult {
	/**
	 * Name is the result\'s name as declared by the Pipeline
	 * @type {string}
	 * @memberof PipelineRunResult
	 */
	name: string;
	/**
	 *
	 * @type {ParamValue}
	 * @memberof PipelineRunResult
	 */
	value: ParamValue;
}

/**
 * PipelineRunRunStatus contains the name of the PipelineTask for this Run and the Run\'s Status
 * @export
 * @interface PipelineRunRunStatus
 */
export interface PipelineRunRunStatus {
	/**
	 * PipelineTaskName is the name of the PipelineTask.
	 * @type {string}
	 * @memberof PipelineRunRunStatus
	 */
	pipelineTaskName?: string;
	/**
	 *
	 * @type {GithubComTektoncdPipelinePkgApisRunbeta1CustomRunStatus}
	 * @memberof PipelineRunRunStatus
	 */
	status?: GithubComTektoncdPipelinePkgApisRunbeta1CustomRunStatus;
	/**
	 * WhenExpressions is the list of checks guarding the execution of the PipelineTask
	 * @type {Array<WhenExpression>}
	 * @memberof PipelineRunRunStatus
	 */
	whenExpressions?: Array<WhenExpression>;
}
/**
 * PipelineRunSpec defines the desired state of PipelineRun
 * @export
 * @interface PipelineRunSpec
 */
export interface PipelineRunSpec {
	/**
	 * Params is a list of parameter names and values.
	 * @type {Array<Param>}
	 * @memberof PipelineRunSpec
	 */
	params?: Array<Param>;
	/**
	 *
	 * @type {PipelineRef}
	 * @memberof PipelineRunSpec
	 */
	pipelineRef?: PipelineRef;
	/**
	 *
	 * @type {PipelineSpec}
	 * @memberof PipelineRunSpec
	 */
	pipelineSpec?: PipelineSpec;
	/**
	 * Used for cancelling a pipelinerun (and maybe more later on)
	 * @type {string}
	 * @memberof PipelineRunSpec
	 */
	status?: string;
	/**
	 * TaskRunSpecs holds a set of runtime specs
	 * @type {Array<PipelineTaskRunSpec>}
	 * @memberof PipelineRunSpec
	 */
	taskRunSpecs?: Array<PipelineTaskRunSpec>;
	/**
	 *
	 * @type {PipelineTaskRunTemplate}
	 * @memberof PipelineRunSpec
	 */
	taskRunTemplate?: PipelineTaskRunTemplate;
	/**
	 *
	 * @type {TimeoutFields}
	 * @memberof PipelineRunSpec
	 */
	timeouts?: TimeoutFields;
	/**
	 * Workspaces holds a set of workspace bindings that must match names with those declared in the pipeline.
	 * @type {Array<WorkspaceBinding>}
	 * @memberof PipelineRunSpec
	 */
	workspaces?: Array<WorkspaceBinding>;
}
/**
 * PipelineRunStatus defines the observed state of PipelineRun
 * @export
 * @interface PipelineRunStatus
 */
export interface PipelineRunStatus {
	/**
	 * Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.
	 * @type {{ [key: string]: string; }}
	 * @memberof PipelineRunStatus
	 */
	annotations?: { [key: string]: string };
	/**
	 * list of TaskRun and Run names, PipelineTask names, and API versions/kinds for children of this PipelineRun.
	 * @type {Array<ChildStatusReference>}
	 * @memberof PipelineRunStatus
	 */
	childReferences?: Array<ChildStatusReference>;
	/**
	 *
	 * @type {IIoK8sApimachineryPkgApisMetaV1Time}
	 * @memberof PipelineRunStatus
	 */
	completionTime?: IIoK8sApimachineryPkgApisMetaV1Time;
	/**
	 * Conditions the latest available observations of a resource\'s current state.
	 * @type {Array<KnativeCondition>}
	 * @memberof PipelineRunStatus
	 */
	conditions?: Array<KnativeCondition>;
	/**
	 *
	 * @type {IIoK8sApimachineryPkgApisMetaV1Time}
	 * @memberof PipelineRunStatus
	 */
	finallyStartTime?: string;
	/**
	 * ObservedGeneration is the \'Generation\' of the Service that was last processed by the controller.
	 * @type {number}
	 * @memberof PipelineRunStatus
	 */
	observedGeneration?: number;
	/**
	 *
	 * @type {PipelineSpec}
	 * @memberof PipelineRunStatus
	 */
	pipelineSpec?: PipelineSpec;
	/**
	 *
	 * @type {Provenance}
	 * @memberof PipelineRunStatus
	 */
	provenance?: Provenance;
	/**
	 * Results are the list of results written out by the pipeline task\'s containers
	 * @type {Array<PipelineRunResult>}
	 * @memberof PipelineRunStatus
	 */
	results?: Array<PipelineRunResult>;
	/**
	 * list of tasks that were skipped due to when expressions evaluating to false
	 * @type {Array<SkippedTask>}
	 * @memberof PipelineRunStatus
	 */
	skippedTasks?: Array<SkippedTask>;
	/**
	 * SpanContext contains tracing span context fields
	 * @type {{ [key: string]: string; }}
	 * @memberof PipelineRunStatus
	 */
	spanContext?: { [key: string]: string };
	/**
	 *
	 * @type {IIoK8sApimachineryPkgApisMetaV1Time}
	 * @memberof PipelineRunStatus
	 */
	startTime?: IIoK8sApimachineryPkgApisMetaV1Time;
}
/**
 * PipelineRunStatusFields holds the fields of PipelineRunStatus\' status. This is defined separately and inlined so that other types can readily consume these fields via duck typing.
 * @export
 * @interface PipelineRunStatusFields
 */
export interface PipelineRunStatusFields {
	/**
	 * list of TaskRun and Run names, PipelineTask names, and API versions/kinds for children of this PipelineRun.
	 * @type {Array<ChildStatusReference>}
	 * @memberof PipelineRunStatusFields
	 */
	childReferences?: Array<ChildStatusReference>;
	/**
	 *
	 * @type {IIoK8sApimachineryPkgApisMetaV1Time}
	 * @memberof PipelineRunStatusFields
	 */
	completionTime?: IIoK8sApimachineryPkgApisMetaV1Time;
	/**
	 *
	 * @type {IIoK8sApimachineryPkgApisMetaV1Time}
	 * @memberof PipelineRunStatusFields
	 */
	finallyStartTime?: IIoK8sApimachineryPkgApisMetaV1Time;
	/**
	 *
	 * @type {PipelineSpec}
	 * @memberof PipelineRunStatusFields
	 */
	pipelineSpec?: PipelineSpec;
	/**
	 *
	 * @type {Provenance}
	 * @memberof PipelineRunStatusFields
	 */
	provenance?: Provenance;
	/**
	 * Results are the list of results written out by the pipeline task\'s containers
	 * @type {Array<PipelineRunResult>}
	 * @memberof PipelineRunStatusFields
	 */
	results?: Array<PipelineRunResult>;
	/**
	 * list of tasks that were skipped due to when expressions evaluating to false
	 * @type {Array<SkippedTask>}
	 * @memberof PipelineRunStatusFields
	 */
	skippedTasks?: Array<SkippedTask>;
	/**
	 * SpanContext contains tracing span context fields
	 * @type {{ [key: string]: string; }}
	 * @memberof PipelineRunStatusFields
	 */
	spanContext?: { [key: string]: string };
	/**
	 *
	 * @type {IIoK8sApimachineryPkgApisMetaV1Time}
	 * @memberof PipelineRunStatusFields
	 */
	startTime?: IIoK8sApimachineryPkgApisMetaV1Time;
}
/**
 * PipelineRunTaskRunStatus contains the name of the PipelineTask for this TaskRun and the TaskRun\'s Status
 * @export
 * @interface PipelineRunTaskRunStatus
 */
export interface PipelineRunTaskRunStatus {
	/**
	 * PipelineTaskName is the name of the PipelineTask.
	 * @type {string}
	 * @memberof PipelineRunTaskRunStatus
	 */
	pipelineTaskName?: string;
	/**
	 *
	 * @type {TaskRunStatus}
	 * @memberof PipelineRunTaskRunStatus
	 */
	status?: TaskRunStatus;
	/**
	 * WhenExpressions is the list of checks guarding the execution of the PipelineTask
	 * @type {Array<WhenExpression>}
	 * @memberof PipelineRunTaskRunStatus
	 */
	whenExpressions?: Array<WhenExpression>;
}
/**
 * PipelineSpec defines the desired state of Pipeline.
 * @export
 * @interface PipelineSpec
 */
export interface PipelineSpec {
	/**
	 * Description is a user-facing description of the pipeline that may be used to populate a UI.
	 * @type {string}
	 * @memberof PipelineSpec
	 */
	description?: string;
	/**
	 * DisplayName is a user-facing name of the pipeline that may be used to populate a UI.
	 * @type {string}
	 * @memberof PipelineSpec
	 */
	displayName?: string;
	/**
	 * Finally declares the list of Tasks that execute just before leaving the Pipeline i.e. either after all Tasks are finished executing successfully or after a failure which would result in ending the Pipeline
	 * @type {Array<PipelineTask>}
	 * @memberof PipelineSpec
	 */
	finally?: Array<PipelineTask>;
	/**
	 * Params declares a list of input parameters that must be supplied when this Pipeline is run.
	 * @type {Array<ParamSpec>}
	 * @memberof PipelineSpec
	 */
	params?: Array<ParamSpec>;
	/**
	 * Results are values that this pipeline can output once run
	 * @type {Array<PipelineResult>}
	 * @memberof PipelineSpec
	 */
	results?: Array<PipelineResult>;
	/**
	 * Tasks declares the graph of Tasks that execute when this Pipeline is run.
	 * @type {Array<PipelineTask>}
	 * @memberof PipelineSpec
	 */
	tasks?: Array<PipelineTask>;
	/**
	 * Workspaces declares a set of named workspaces that are expected to be provided by a PipelineRun.
	 * @type {Array<PipelineWorkspaceDeclaration>}
	 * @memberof PipelineSpec
	 */
	workspaces?: Array<PipelineWorkspaceDeclaration>;
}
/**
 * PipelineTask defines a task in a Pipeline, passing inputs from both Params and from the output of previous tasks.
 * @export
 * @interface PipelineTask
 */
export interface PipelineTask {
	/**
	 * Description is the description of this task within the context of a Pipeline. This description may be used to populate a UI.
	 * @type {string}
	 * @memberof PipelineTask
	 */
	description?: string;
	/**
	 * DisplayName is the display name of this task within the context of a Pipeline. This display name may be used to populate a UI.
	 * @type {string}
	 * @memberof PipelineTask
	 */
	displayName?: string;
	/**
	 *
	 * @type {Matrix}
	 * @memberof PipelineTask
	 */
	matrix?: Matrix;
	/**
	 * Name is the name of this task within the context of a Pipeline. Name is used as a coordinate with the `from` and `runAfter` fields to establish the execution order of tasks relative to one another.
	 * @type {string}
	 * @memberof PipelineTask
	 */
	name?: string;
	/**
	 * OnError defines the exiting behavior of a PipelineRun on error can be set to [ continue | stopAndFail ]
	 * @type {string}
	 * @memberof PipelineTask
	 */
	onError?: string;
	/**
	 * Parameters declares parameters passed to this task.
	 * @type {Array<Param>}
	 * @memberof PipelineTask
	 */
	params?: Array<Param>;
	/**
	 *
	 * @type {PipelineRef}
	 * @memberof PipelineTask
	 */
	pipelineRef?: PipelineRef;
	/**
	 *
	 * @type {PipelineSpec}
	 * @memberof PipelineTask
	 */
	pipelineSpec?: PipelineSpec;
	/**
	 * Retries represents how many times this task should be retried in case of task failure: ConditionSucceeded set to False
	 * @type {number}
	 * @memberof PipelineTask
	 */
	retries?: number;
	/**
	 * RunAfter is the list of PipelineTask names that should be executed before this Task executes. (Used to force a specific ordering in graph execution.)
	 * @type {Array<string>}
	 * @memberof PipelineTask
	 */
	runAfter?: Array<string>;
	/**
	 *
	 * @type {TaskRef}
	 * @memberof PipelineTask
	 */
	taskRef?: TaskRef;
	/**
	 *
	 * @type {EmbeddedTask}
	 * @memberof PipelineTask
	 */
	taskSpec?: EmbeddedTask;
	/**
	 *
	 * @type {Duration}
	 * @memberof PipelineTask
	 */
	timeout?: Duration;
	/**
	 * When is a list of when expressions that need to be true for the task to run
	 * @type {Array<WhenExpression>}
	 * @memberof PipelineTask
	 */
	when?: Array<WhenExpression>;
	/**
	 * Workspaces maps workspaces from the pipeline spec to the workspaces declared in the Task.
	 * @type {Array<WorkspacePipelineTaskBinding>}
	 * @memberof PipelineTask
	 */
	workspaces?: Array<WorkspacePipelineTaskBinding>;
}
/**
 * PipelineTaskMetadata contains the labels or annotations for an EmbeddedTask
 * @export
 * @interface PipelineTaskMetadata
 */
export interface PipelineTaskMetadata {
	/**
	 *
	 * @type {{ [key: string]: string; }}
	 * @memberof PipelineTaskMetadata
	 */
	annotations?: { [key: string]: string };
	/**
	 *
	 * @type {{ [key: string]: string; }}
	 * @memberof PipelineTaskMetadata
	 */
	labels?: { [key: string]: string };
}
/**
 * PipelineTaskParam is used to provide arbitrary string parameters to a Task.
 * @export
 * @interface PipelineTaskParam
 */
export interface PipelineTaskParam {
	/**
	 *
	 * @type {string}
	 * @memberof PipelineTaskParam
	 */
	name: string;
	/**
	 *
	 * @type {string}
	 * @memberof PipelineTaskParam
	 */
	value: string;
}
/**
 * PipelineTaskRun reports the results of running a step in the Task. Each task has the potential to succeed or fail (based on the exit code) and produces logs.
 * @export
 * @interface PipelineTaskRun
 */
export interface PipelineTaskRun {
	/**
	 *
	 * @type {string}
	 * @memberof PipelineTaskRun
	 */
	name?: string;
}
/**
 * PipelineTaskRunSpec  can be used to configure specific specs for a concrete Task
 * @export
 * @interface PipelineTaskRunSpec
 */
export interface PipelineTaskRunSpec {
	/**
	 *
	 * @type {ResourceRequirements}
	 * @memberof PipelineTaskRunSpec
	 */
	computeResources?: ResourceRequirements;
	/**
	 *
	 * @type {PipelineTaskMetadata}
	 * @memberof PipelineTaskRunSpec
	 */
	metadata?: PipelineTaskMetadata;
	/**
	 *
	 * @type {string}
	 * @memberof PipelineTaskRunSpec
	 */
	pipelineTaskName?: string;
	/**
	 *
	 * @type {PodTemplate}
	 * @memberof PipelineTaskRunSpec
	 */
	podTemplate?: PodTemplate;
	/**
	 *
	 * @type {string}
	 * @memberof PipelineTaskRunSpec
	 */
	serviceAccountName?: string;
	/**
	 *
	 * @type {Array<TaskRunSidecarSpec>}
	 * @memberof PipelineTaskRunSpec
	 */
	sidecarSpecs?: Array<TaskRunSidecarSpec>;
	/**
	 *
	 * @type {Array<TaskRunStepSpec>}
	 * @memberof PipelineTaskRunSpec
	 */
	stepSpecs?: Array<TaskRunStepSpec>;
}
/**
 * PipelineTaskRunTemplate is used to specify run specifications for all Task in pipelinerun.
 * @export
 * @interface PipelineTaskRunTemplate
 */
export interface PipelineTaskRunTemplate {
	/**
	 *
	 * @type {PodTemplate}
	 * @memberof PipelineTaskRunTemplate
	 */
	podTemplate?: PodTemplate;
	/**
	 *
	 * @type {string}
	 * @memberof PipelineTaskRunTemplate
	 */
	serviceAccountName?: string;
}
/**
 * WorkspacePipelineDeclaration creates a named slot in a Pipeline that a PipelineRun is expected to populate with a workspace binding.  Deprecated: use PipelineWorkspaceDeclaration type instead
 * @export
 * @interface PipelineWorkspaceDeclaration
 */
export interface PipelineWorkspaceDeclaration {
	/**
	 * Description is a human readable string describing how the workspace will be used in the Pipeline. It can be useful to include a bit of detail about which tasks are intended to have access to the data on the workspace.
	 * @type {string}
	 * @memberof PipelineWorkspaceDeclaration
	 */
	description?: string;
	/**
	 * Name is the name of a workspace to be provided by a PipelineRun.
	 * @type {string}
	 * @memberof PipelineWorkspaceDeclaration
	 */
	name: string;
	/**
	 * Optional marks a Workspace as not being required in PipelineRuns. By default this field is false and so declared workspaces are required.
	 * @type {boolean}
	 * @memberof PipelineWorkspaceDeclaration
	 */
	optional?: boolean;
}
/**
 * PropertySpec defines the struct for object keys
 * @export
 * @interface PropertySpec
 */
export interface PropertySpec {
	/**
	 *
	 * @type {string}
	 * @memberof PropertySpec
	 */
	type?: string;
}
/**
 * Provenance contains metadata about resources used in the TaskRun/PipelineRun such as the source from where a remote build definition was fetched. This field aims to carry minimum amoumt of metadata in *Run status so that Tekton Chains can capture them in the provenance.
 * @export
 * @interface Provenance
 */
export interface Provenance {
	/**
	 *
	 * @type {GithubComTektoncdPipelinePkgApisConfigFeatureFlags}
	 * @memberof Provenance
	 */
	featureFlags?: GithubComTektoncdPipelinePkgApisConfigFeatureFlags;
	/**
	 *
	 * @type {RefSource}
	 * @memberof Provenance
	 */
	refSource?: RefSource;
}
/**
 * Ref can be used to refer to a specific instance of a StepAction.
 * @export
 * @interface Ref
 */
export interface Ref {
	/**
	 * Name of the referenced step
	 * @type {string}
	 * @memberof Ref
	 */
	name?: string;
}
/**
 * RefSource contains the information that can uniquely identify where a remote built definition came from i.e. Git repositories, Tekton Bundles in OCI registry and hub.
 * @export
 * @interface RefSource
 */
export interface RefSource {
	/**
	 * Digest is a collection of cryptographic digests for the contents of the artifact specified by URI. Example: {\"sha1\": \"f99d13e554ffcb696dee719fa85b695cb5b0f428\"}
	 * @type {{ [key: string]: string; }}
	 * @memberof RefSource
	 */
	digest?: { [key: string]: string };
	/**
	 * EntryPoint identifies the entry point into the build. This is often a path to a build definition file and/or a target label within that file. Example: \"task/git-clone/0.8/git-clone.yaml\"
	 * @type {string}
	 * @memberof RefSource
	 */
	entryPoint?: string;
	/**
	 * URI indicates the identity of the source of the build definition. Example: \"https://github.com/tektoncd/catalog\"
	 * @type {string}
	 * @memberof RefSource
	 */
	uri?: string;
}
/**
 * ResolverRef can be used to refer to a Pipeline or Task in a remote location like a git repo. This feature is in beta and these fields are only available when the beta feature gate is enabled.
 * @export
 * @interface ResolverRef
 */
export interface ResolverRef {
	/**
	 * Params contains the parameters used to identify the referenced Tekton resource. Example entries might include \"repo\" or \"path\" but the set of params ultimately depends on the chosen resolver.
	 * @type {Array<Param>}
	 * @memberof ResolverRef
	 */
	params?: Array<Param>;
	/**
	 * Resolver is the name of the resolver that should perform resolution of the referenced Tekton resource, such as \"git\".
	 * @type {string}
	 * @memberof ResolverRef
	 */
	resolver?: string;
}
/**
 * ResultRef is a type that represents a reference to a task run result
 * @export
 * @interface ResultRef
 */
export interface ResultRef {
	/**
	 *
	 * @type {string}
	 * @memberof ResultRef
	 */
	pipelineTask: string;
	/**
	 *
	 * @type {string}
	 * @memberof ResultRef
	 */
	property: string;
	/**
	 *
	 * @type {string}
	 * @memberof ResultRef
	 */
	result: string;
	/**
	 *
	 * @type {number}
	 * @memberof ResultRef
	 */
	resultsIndex: number;
}
/**
 * Sidecar has nearly the same data structure as Step but does not have the ability to timeout.
 * @export
 * @interface Sidecar
 */
export interface Sidecar {
	/**
	 * Arguments to the entrypoint. The image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Sidecar\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	 * @type {Array<string>}
	 * @memberof Sidecar
	 */
	args?: Array<string>;
	/**
	 * Entrypoint array. Not executed within a shell. The image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Sidecar\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	 * @type {Array<string>}
	 * @memberof Sidecar
	 */
	command?: Array<string>;
	/**
	 *
	 * @type {ResourceRequirements}
	 * @memberof Sidecar
	 */
	computeResources?: ResourceRequirements;
	/**
	 * List of environment variables to set in the Sidecar. Cannot be updated.
	 * @type {Array<EnvVar>}
	 * @memberof Sidecar
	 */
	env?: Array<EnvVar>;
	/**
	 * List of sources to populate environment variables in the Sidecar. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	 * @type {Array<EnvFromSource>}
	 * @memberof Sidecar
	 */
	envFrom?: Array<EnvFromSource>;
	/**
	 * Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images
	 * @type {string}
	 * @memberof Sidecar
	 */
	image?: string;
	/**
	 * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	 * @type {string}
	 * @memberof Sidecar
	 */
	imagePullPolicy?: string;
	/**
	 *
	 * @type {Lifecycle}
	 * @memberof Sidecar
	 */
	lifecycle?: Lifecycle;
	/**
	 *
	 * @type {Probe}
	 * @memberof Sidecar
	 */
	livenessProbe?: Probe;
	/**
	 * Name of the Sidecar specified as a DNS_LABEL. Each Sidecar in a Task must have a unique name (DNS_LABEL). Cannot be updated.
	 * @type {string}
	 * @memberof Sidecar
	 */
	name: string;
	/**
	 * List of ports to expose from the Sidecar. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.
	 * @type {Array<ContainerPort>}
	 * @memberof Sidecar
	 */
	ports?: Array<ContainerPort>;
	/**
	 *
	 * @type {Probe}
	 * @memberof Sidecar
	 */
	readinessProbe?: Probe;
	/**
	 * Script is the contents of an executable file to execute.  If Script is not empty, the Step cannot have an Command or Args.
	 * @type {string}
	 * @memberof Sidecar
	 */
	script?: string;
	/**
	 *
	 * @type {SecurityContext}
	 * @memberof Sidecar
	 */
	securityContext?: SecurityContext;
	/**
	 *
	 * @type {Probe}
	 * @memberof Sidecar
	 */
	startupProbe?: Probe;
	/**
	 * Whether this Sidecar should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the Sidecar will always result in EOF. Default is false.
	 * @type {boolean}
	 * @memberof Sidecar
	 */
	stdin?: boolean;
	/**
	 * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on Sidecar start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the Sidecar is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	 * @type {boolean}
	 * @memberof Sidecar
	 */
	stdinOnce?: boolean;
	/**
	 * Optional: Path at which the file to which the Sidecar\'s termination message will be written is mounted into the Sidecar\'s filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	 * @type {string}
	 * @memberof Sidecar
	 */
	terminationMessagePath?: string;
	/**
	 * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the Sidecar status message on both success and failure. FallbackToLogsOnError will use the last chunk of Sidecar log output if the termination message file is empty and the Sidecar exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	 * @type {string}
	 * @memberof Sidecar
	 */
	terminationMessagePolicy?: string;
	/**
	 * Whether this Sidecar should allocate a TTY for itself, also requires \'stdin\' to be true. Default is false.
	 * @type {boolean}
	 * @memberof Sidecar
	 */
	tty?: boolean;
	/**
	 * volumeDevices is the list of block devices to be used by the Sidecar.
	 * @type {Array<VolumeDevice>}
	 * @memberof Sidecar
	 */
	volumeDevices?: Array<VolumeDevice>;
	/**
	 * Volumes to mount into the Sidecar\'s filesystem. Cannot be updated.
	 * @type {Array<VolumeMount>}
	 * @memberof Sidecar
	 */
	volumeMounts?: Array<VolumeMount>;
	/**
	 * Sidecar\'s working directory. If not specified, the container runtime\'s default will be used, which might be configured in the container image. Cannot be updated.
	 * @type {string}
	 * @memberof Sidecar
	 */
	workingDir?: string;
	/**
	 * This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\" for this field to be supported.  Workspaces is a list of workspaces from the Task that this Sidecar wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.
	 * @type {Array<WorkspaceUsage>}
	 * @memberof Sidecar
	 */
	workspaces?: Array<WorkspaceUsage>;
}
/**
 * SidecarState reports the results of running a sidecar in a Task.
 * @export
 * @interface SidecarState
 */
export interface SidecarState {
	/**
	 *
	 * @type {string}
	 * @memberof SidecarState
	 */
	container?: string;
	/**
	 *
	 * @type {string}
	 * @memberof SidecarState
	 */
	imageID?: string;
	/**
	 *
	 * @type {string}
	 * @memberof SidecarState
	 */
	name?: string;
	/**
	 *
	 * @type {ContainerStateRunning}
	 * @memberof SidecarState
	 */
	running?: ContainerStateRunning;
	/**
	 *
	 * @type {ContainerStateTerminated}
	 * @memberof SidecarState
	 */
	terminated?: ContainerStateTerminated;
	/**
	 *
	 * @type {ContainerStateWaiting}
	 * @memberof SidecarState
	 */
	waiting?: ContainerStateWaiting;
}
/**
 * SkippedTask is used to describe the Tasks that were skipped due to their When Expressions evaluating to False. This is a struct because we are looking into including more details about the When Expressions that caused this Task to be skipped.
 * @export
 * @interface SkippedTask
 */
export interface SkippedTask {
	/**
	 * Name is the Pipeline Task name
	 * @type {string}
	 * @memberof SkippedTask
	 */
	name: string;
	/**
	 * Reason is the cause of the PipelineTask being skipped.
	 * @type {string}
	 * @memberof SkippedTask
	 */
	reason: string;
	/**
	 * WhenExpressions is the list of checks guarding the execution of the PipelineTask
	 * @type {Array<WhenExpression>}
	 * @memberof SkippedTask
	 */
	whenExpressions?: Array<WhenExpression>;
}
/**
 * Step runs a subcomponent of a Task
 * @export
 * @interface Step
 */
export interface Step {
	/**
	 * Arguments to the entrypoint. The image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	 * @type {Array<string>}
	 * @memberof Step
	 */
	args?: Array<string>;
	/**
	 * Entrypoint array. Not executed within a shell. The image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	 * @type {Array<string>}
	 * @memberof Step
	 */
	command?: Array<string>;
	/**
	 *
	 * @type {ResourceRequirements}
	 * @memberof Step
	 */
	computeResources?: ResourceRequirements;
	/**
	 * List of environment variables to set in the Step. Cannot be updated.
	 * @type {Array<EnvVar>}
	 * @memberof Step
	 */
	env?: Array<EnvVar>;
	/**
	 * List of sources to populate environment variables in the Step. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the Step is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	 * @type {Array<EnvFromSource>}
	 * @memberof Step
	 */
	envFrom?: Array<EnvFromSource>;
	/**
	 * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
	 * @type {string}
	 * @memberof Step
	 */
	image?: string;
	/**
	 * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	 * @type {string}
	 * @memberof Step
	 */
	imagePullPolicy?: string;
	/**
	 * Name of the Step specified as a DNS_LABEL. Each Step in a Task must have a unique name.
	 * @type {string}
	 * @memberof Step
	 */
	name: string;
	/**
	 * OnError defines the exiting behavior of a container on error can be set to [ continue | stopAndFail ]
	 * @type {string}
	 * @memberof Step
	 */
	onError?: string;
	/**
	 * Params declares parameters passed to this step action.
	 * @type {Array<Param>}
	 * @memberof Step
	 */
	params?: Array<Param>;
	/**
	 *
	 * @type {Ref}
	 * @memberof Step
	 */
	ref?: Ref;
	/**
	 * Results declares StepResults produced by the Step.  This is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.  It can be used in an inlined Step when used to store Results to $(step.results.resultName.path). It cannot be used when referencing StepActions using [v1.Step.Ref]. The Results declared by the StepActions will be stored here instead.
	 * @type {Array<StepResult>}
	 * @memberof Step
	 */
	results?: Array<StepResult>;
	/**
	 * Script is the contents of an executable file to execute.  If Script is not empty, the Step cannot have an Command and the Args will be passed to the Script.
	 * @type {string}
	 * @memberof Step
	 */
	script?: string;
	/**
	 *
	 * @type {SecurityContext}
	 * @memberof Step
	 */
	securityContext?: SecurityContext;
	/**
	 *
	 * @type {StepOutputConfig}
	 * @memberof Step
	 */
	stderrConfig?: StepOutputConfig;
	/**
	 *
	 * @type {StepOutputConfig}
	 * @memberof Step
	 */
	stdoutConfig?: StepOutputConfig;
	/**
	 *
	 * @type {Duration}
	 * @memberof Step
	 */
	timeout?: Duration;
	/**
	 * volumeDevices is the list of block devices to be used by the Step.
	 * @type {Array<VolumeDevice>}
	 * @memberof Step
	 */
	volumeDevices?: Array<VolumeDevice>;
	/**
	 * Volumes to mount into the Step\'s filesystem. Cannot be updated.
	 * @type {Array<VolumeMount>}
	 * @memberof Step
	 */
	volumeMounts?: Array<VolumeMount>;
	/**
	 * Step\'s working directory. If not specified, the container runtime\'s default will be used, which might be configured in the container image. Cannot be updated.
	 * @type {string}
	 * @memberof Step
	 */
	workingDir?: string;
	/**
	 * This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\" for this field to be supported.  Workspaces is a list of workspaces from the Task that this Step wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.
	 * @type {Array<WorkspaceUsage>}
	 * @memberof Step
	 */
	workspaces?: Array<WorkspaceUsage>;
}
/**
 * StepOutputConfig stores configuration for a step output stream.
 * @export
 * @interface StepOutputConfig
 */
export interface StepOutputConfig {
	/**
	 * Path to duplicate stdout stream to on container\'s local filesystem.
	 * @type {string}
	 * @memberof StepOutputConfig
	 */
	path?: string;
}
/**
 * StepResult used to describe the Results of a Step.  This is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.
 * @export
 * @interface StepResult
 */
export interface StepResult {
	/**
	 * Description is a human-readable description of the result
	 * @type {string}
	 * @memberof StepResult
	 */
	description?: string;
	/**
	 * Name the given name
	 * @type {string}
	 * @memberof StepResult
	 */
	name: string;
	/**
	 * Properties is the JSON Schema properties to support key-value pairs results.
	 * @type {{ [key: string]: PropertySpec; }}
	 * @memberof StepResult
	 */
	properties?: { [key: string]: PropertySpec };
	/**
	 * The possible types are \'string\', \'array\', and \'object\', with \'string\' as the default.
	 * @type {string}
	 * @memberof StepResult
	 */
	type?: string;
}
/**
 * StepState reports the results of running a step in a Task.
 * @export
 * @interface StepState
 */
export interface StepState {
	/**
	 *
	 * @type {string}
	 * @memberof StepState
	 */
	container?: string;
	/**
	 *
	 * @type {string}
	 * @memberof StepState
	 */
	imageID?: string;
	/**
	 *
	 * @type {Array<Artifact>}
	 * @memberof StepState
	 */
	inputs?: Array<Artifact>;
	/**
	 *
	 * @type {string}
	 * @memberof StepState
	 */
	name?: string;
	/**
	 *
	 * @type {Array<Artifact>}
	 * @memberof StepState
	 */
	outputs?: Array<Artifact>;
	/**
	 *
	 * @type {Array<TaskRunResult>}
	 * @memberof StepState
	 */
	results?: Array<TaskRunResult>;
	/**
	 *
	 * @type {ContainerStateRunning}
	 * @memberof StepState
	 */
	running?: ContainerStateRunning;
	/**
	 *
	 * @type {ContainerStateTerminated}
	 * @memberof StepState
	 */
	terminated?: ContainerStateTerminated;
	/**
	 *
	 * @type {string}
	 * @memberof StepState
	 */
	terminationReason?: string;
	/**
	 *
	 * @type {ContainerStateWaiting}
	 * @memberof StepState
	 */
	waiting?: ContainerStateWaiting;
}
/**
 * StepTemplate is a template for a Step
 * @export
 * @interface StepTemplate
 */
export interface StepTemplate {
	/**
	 * Arguments to the entrypoint. The image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Step\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	 * @type {Array<string>}
	 * @memberof StepTemplate
	 */
	args?: Array<string>;
	/**
	 * Entrypoint array. Not executed within a shell. The image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Step\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	 * @type {Array<string>}
	 * @memberof StepTemplate
	 */
	command?: Array<string>;
	/**
	 *
	 * @type {ResourceRequirements}
	 * @memberof StepTemplate
	 */
	computeResources?: ResourceRequirements;
	/**
	 * List of environment variables to set in the Step. Cannot be updated.
	 * @type {Array<EnvVar>}
	 * @memberof StepTemplate
	 */
	env?: Array<EnvVar>;
	/**
	 * List of sources to populate environment variables in the Step. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the Step is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	 * @type {Array<EnvFromSource>}
	 * @memberof StepTemplate
	 */
	envFrom?: Array<EnvFromSource>;
	/**
	 * Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images
	 * @type {string}
	 * @memberof StepTemplate
	 */
	image?: string;
	/**
	 * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	 * @type {string}
	 * @memberof StepTemplate
	 */
	imagePullPolicy?: string;
	/**
	 *
	 * @type {SecurityContext}
	 * @memberof StepTemplate
	 */
	securityContext?: SecurityContext;
	/**
	 * volumeDevices is the list of block devices to be used by the Step.
	 * @type {Array<VolumeDevice>}
	 * @memberof StepTemplate
	 */
	volumeDevices?: Array<VolumeDevice>;
	/**
	 * Volumes to mount into the Step\'s filesystem. Cannot be updated.
	 * @type {Array<VolumeMount>}
	 * @memberof StepTemplate
	 */
	volumeMounts?: Array<VolumeMount>;
	/**
	 * Step\'s working directory. If not specified, the container runtime\'s default will be used, which might be configured in the container image. Cannot be updated.
	 * @type {string}
	 * @memberof StepTemplate
	 */
	workingDir?: string;
}
/**
 * Task represents a collection of sequential steps that are run as part of a Pipeline using a set of inputs and producing a set of outputs. Tasks execute when TaskRuns are created that provide the input parameters and resources and output resources the Task requires.
 * @export
 * @interface Task
 */
export interface Task {
	/**
	 * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	 * @type {string}
	 * @memberof Task
	 */
	apiVersion?: string;
	/**
	 * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	 * @type {string}
	 * @memberof Task
	 */
	kind?: string;
	/**
	 *
	 * @type {ObjectMeta}
	 * @memberof Task
	 */
	metadata?: ObjectMeta;
	/**
	 *
	 * @type {TaskSpec}
	 * @memberof Task
	 */
	spec?: TaskSpec;
}
/**
 * TaskBreakpoints defines the breakpoint config for a particular Task
 * @export
 * @interface TaskBreakpoints
 */
export interface TaskBreakpoints {
	/**
	 * if enabled, pause TaskRun on failure of a step failed step will not exit
	 * @type {string}
	 * @memberof TaskBreakpoints
	 */
	onFailure?: string;
}
/**
 * TaskList contains a list of Task
 * @export
 * @interface TaskList
 */
export interface TaskList {
	/**
	 * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	 * @type {string}
	 * @memberof TaskList
	 */
	apiVersion?: string;
	/**
	 *
	 * @type {Array<Task>}
	 * @memberof TaskList
	 */
	items: Array<Task>;
	/**
	 * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	 * @type {string}
	 * @memberof TaskList
	 */
	kind?: string;
	/**
	 *
	 * @type {ListMeta}
	 * @memberof TaskList
	 */
	metadata?: ListMeta;
}
/**
 * TaskRef can be used to refer to a specific instance of a task.
 * @export
 * @interface TaskRef
 */
export interface TaskRef {
	/**
	 * API version of the referent Note: A Task with non-empty APIVersion and Kind is considered a Custom Task
	 * @type {string}
	 * @memberof TaskRef
	 */
	apiVersion?: string;
	/**
	 * TaskKind indicates the Kind of the Task: 1. Namespaced Task when Kind is set to \"Task\". If Kind is \"\", it defaults to \"Task\". 2. Custom Task when Kind is non-empty and APIVersion is non-empty
	 * @type {string}
	 * @memberof TaskRef
	 */
	kind?: string;
	/**
	 * Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	 * @type {string}
	 * @memberof TaskRef
	 */
	name?: string;
}
/**
 * TaskResult used to describe the results of a task
 * @export
 * @interface TaskResult
 */
export interface TaskResult {
	/**
	 * Description is a human-readable description of the result
	 * @type {string}
	 * @memberof TaskResult
	 */
	description?: string;
	/**
	 * Name the given name
	 * @type {string}
	 * @memberof TaskResult
	 */
	name: string;
	/**
	 * Properties is the JSON Schema properties to support key-value pairs results.
	 * @type {{ [key: string]: PropertySpec; }}
	 * @memberof TaskResult
	 */
	properties?: { [key: string]: PropertySpec };
	/**
	 * Type is the user-specified type of the result. The possible type is currently \"string\" and will support \"array\" in following work.
	 * @type {string}
	 * @memberof TaskResult
	 */
	type?: string;
	/**
	 *
	 * @type {ParamValue}
	 * @memberof TaskResult
	 */
	value?: ParamValue;
}
/**
 * TaskRun represents a single execution of a Task. TaskRuns are how the steps specified in a Task are executed; they specify the parameters and resources used to run the steps in a Task.
 * @export
 * @interface TaskRun
 */
export interface TaskRun {
	/**
	 * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	 * @type {string}
	 * @memberof TaskRun
	 */
	apiVersion?: string;
	/**
	 * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	 * @type {string}
	 * @memberof TaskRun
	 */
	kind?: string;
	/**
	 *
	 * @type {ObjectMeta}
	 * @memberof TaskRun
	 */
	metadata?: ObjectMeta;
	/**
	 *
	 * @type {TaskRunSpec}
	 * @memberof TaskRun
	 */
	spec?: TaskRunSpec;
	/**
	 *
	 * @type {TaskRunStatus}
	 * @memberof TaskRun
	 */
	status?: TaskRunStatus;
}
/**
 * TaskRunDebug defines the breakpoint config for a particular TaskRun
 * @export
 * @interface TaskRunDebug
 */
export interface TaskRunDebug {
	/**
	 *
	 * @type {TaskBreakpoints}
	 * @memberof TaskRunDebug
	 */
	breakpoints?: TaskBreakpoints;
}
/**
 * TaskRunInputs holds the input values that this task was invoked with.
 * @export
 * @interface TaskRunInputs
 */
export interface TaskRunInputs {
	/**
	 *
	 * @type {Array<Param>}
	 * @memberof TaskRunInputs
	 */
	params?: Array<Param>;
}
/**
 * TaskRunList contains a list of TaskRun
 * @export
 * @interface TaskRunList
 */
export interface TaskRunList {
	/**
	 * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	 * @type {string}
	 * @memberof TaskRunList
	 */
	apiVersion?: string;
	/**
	 *
	 * @type {Array<TaskRun>}
	 * @memberof TaskRunList
	 */
	items: Array<TaskRun>;
	/**
	 * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	 * @type {string}
	 * @memberof TaskRunList
	 */
	kind?: string;
	/**
	 *
	 * @type {ListMeta}
	 * @memberof TaskRunList
	 */
	metadata?: ListMeta;
}
/**
 * TaskRunStepResult is a type alias of TaskRunResult
 * @export
 * @interface TaskRunResult
 */
export interface TaskRunResult {
	/**
	 * Name the given name
	 * @type {string}
	 * @memberof TaskRunResult
	 */
	name: string;
	/**
	 * Type is the user-specified type of the result. The possible type is currently \"string\" and will support \"array\" in following work.
	 * @type {string}
	 * @memberof TaskRunResult
	 */
	type?: string;
	/**
	 *
	 * @type {ParamValue}
	 * @memberof TaskRunResult
	 */
	value: ParamValue;
}
/**
 * TaskRunSidecarSpec is used to override the values of a Sidecar in the corresponding Task.
 * @export
 * @interface TaskRunSidecarSpec
 */
export interface TaskRunSidecarSpec {
	/**
	 *
	 * @type {ResourceRequirements}
	 * @memberof TaskRunSidecarSpec
	 */
	computeResources: ResourceRequirements;
	/**
	 * The name of the Sidecar to override.
	 * @type {string}
	 * @memberof TaskRunSidecarSpec
	 */
	name: string;
}
/**
 * TaskRunSpec defines the desired state of TaskRun
 * @export
 * @interface TaskRunSpec
 */
export interface TaskRunSpec {
	/**
	 *
	 * @type {ResourceRequirements}
	 * @memberof TaskRunSpec
	 */
	computeResources?: ResourceRequirements;
	/**
	 *
	 * @type {TaskRunDebug}
	 * @memberof TaskRunSpec
	 */
	debug?: TaskRunDebug;
	/**
	 *
	 * @type {Array<Param>}
	 * @memberof TaskRunSpec
	 */
	params?: Array<Param>;
	/**
	 *
	 * @type {PodTemplate}
	 * @memberof TaskRunSpec
	 */
	podTemplate?: PodTemplate;
	/**
	 * Retries represents how many times this TaskRun should be retried in the event of task failure.
	 * @type {number}
	 * @memberof TaskRunSpec
	 */
	retries?: number;
	/**
	 *
	 * @type {string}
	 * @memberof TaskRunSpec
	 */
	serviceAccountName?: string;
	/**
	 * Specs to apply to Sidecars in this TaskRun. If a field is specified in both a Sidecar and a SidecarSpec, the value from the SidecarSpec will be used. This field is only supported when the alpha feature gate is enabled.
	 * @type {Array<TaskRunSidecarSpec>}
	 * @memberof TaskRunSpec
	 */
	sidecarSpecs?: Array<TaskRunSidecarSpec>;
	/**
	 * Used for cancelling a TaskRun (and maybe more later on)
	 * @type {string}
	 * @memberof TaskRunSpec
	 */
	status?: string;
	/**
	 * Status message for cancellation.
	 * @type {string}
	 * @memberof TaskRunSpec
	 */
	statusMessage?: string;
	/**
	 * Specs to apply to Steps in this TaskRun. If a field is specified in both a Step and a StepSpec, the value from the StepSpec will be used. This field is only supported when the alpha feature gate is enabled.
	 * @type {Array<TaskRunStepSpec>}
	 * @memberof TaskRunSpec
	 */
	stepSpecs?: Array<TaskRunStepSpec>;
	/**
	 *
	 * @type {TaskRef}
	 * @memberof TaskRunSpec
	 */
	taskRef?: TaskRef;
	/**
	 *
	 * @type {TaskSpec}
	 * @memberof TaskRunSpec
	 */
	taskSpec?: TaskSpec;
	/**
	 *
	 * @type {Duration}
	 * @memberof TaskRunSpec
	 */
	timeout?: Duration;
	/**
	 * Workspaces is a list of WorkspaceBindings from volumes to workspaces.
	 * @type {Array<WorkspaceBinding>}
	 * @memberof TaskRunSpec
	 */
	workspaces?: Array<WorkspaceBinding>;
}
/**
 * TaskRunStatus defines the observed state of TaskRun
 * @export
 * @interface TaskRunStatus
 */
export interface TaskRunStatus {
	/**
	 * Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.
	 * @type {{ [key: string]: string; }}
	 * @memberof TaskRunStatus
	 */
	annotations?: { [key: string]: string };
	/**
	 *
	 * @type {IIoK8sApimachineryPkgApisMetaV1Time}
	 * @memberof TaskRunStatus
	 */
	completionTime?: IIoK8sApimachineryPkgApisMetaV1Time;
	/**
	 * Conditions the latest available observations of a resource\'s current state.
	 * @type {Array<KnativeCondition>}
	 * @memberof TaskRunStatus
	 */
	conditions?: Array<KnativeCondition>;
	/**
	 * ObservedGeneration is the \'Generation\' of the Service that was last processed by the controller.
	 * @type {number}
	 * @memberof TaskRunStatus
	 */
	observedGeneration?: number;
	/**
	 * PodName is the name of the pod responsible for executing this task\'s steps.
	 * @type {string}
	 * @memberof TaskRunStatus
	 */
	podName: string;
	/**
	 *
	 * @type {Provenance}
	 * @memberof TaskRunStatus
	 */
	provenance?: Provenance;
	/**
	 * Results are the list of results written out by the task\'s containers
	 * @type {Array<TaskRunResult>}
	 * @memberof TaskRunStatus
	 */
	results?: Array<TaskRunResult>;
	/**
	 * RetriesStatus contains the history of TaskRunStatus in case of a retry in order to keep record of failures. All TaskRunStatus stored in RetriesStatus will have no date within the RetriesStatus as is redundant.
	 * @type {Array<TaskRunStatus>}
	 * @memberof TaskRunStatus
	 */
	retriesStatus?: Array<TaskRunStatus>;
	/**
	 * The list has one entry per sidecar in the manifest. Each entry is represents the imageid of the corresponding sidecar.
	 * @type {Array<SidecarState>}
	 * @memberof TaskRunStatus
	 */
	sidecars?: Array<SidecarState>;
	/**
	 * SpanContext contains tracing span context fields
	 * @type {{ [key: string]: string; }}
	 * @memberof TaskRunStatus
	 */
	spanContext?: { [key: string]: string };
	/**
	 *
	 * @type {IIoK8sApimachineryPkgApisMetaV1Time}
	 * @memberof TaskRunStatus
	 */
	startTime?: IIoK8sApimachineryPkgApisMetaV1Time;
	/**
	 * Steps describes the state of each build step container.
	 * @type {Array<StepState>}
	 * @memberof TaskRunStatus
	 */
	steps?: Array<StepState>;
	/**
	 *
	 * @type {TaskSpec}
	 * @memberof TaskRunStatus
	 */
	taskSpec?: TaskSpec;
}
/**
 * TaskRunStatusFields holds the fields of TaskRun\'s status.  This is defined separately and inlined so that other types can readily consume these fields via duck typing.
 * @export
 * @interface TaskRunStatusFields
 */
export interface TaskRunStatusFields {
	/**
	 *
	 * @type {IIoK8sApimachineryPkgApisMetaV1Time}
	 * @memberof TaskRunStatusFields
	 */
	completionTime?: IIoK8sApimachineryPkgApisMetaV1Time;
	/**
	 * PodName is the name of the pod responsible for executing this task\'s steps.
	 * @type {string}
	 * @memberof TaskRunStatusFields
	 */
	podName: string;
	/**
	 *
	 * @type {Provenance}
	 * @memberof TaskRunStatusFields
	 */
	provenance?: Provenance;
	/**
	 * Results are the list of results written out by the task\'s containers
	 * @type {Array<TaskRunResult>}
	 * @memberof TaskRunStatusFields
	 */
	results?: Array<TaskRunResult>;
	/**
	 * RetriesStatus contains the history of TaskRunStatus in case of a retry in order to keep record of failures. All TaskRunStatus stored in RetriesStatus will have no date within the RetriesStatus as is redundant.
	 * @type {Array<TaskRunStatus>}
	 * @memberof TaskRunStatusFields
	 */
	retriesStatus?: Array<TaskRunStatus>;
	/**
	 * The list has one entry per sidecar in the manifest. Each entry is represents the imageid of the corresponding sidecar.
	 * @type {Array<SidecarState>}
	 * @memberof TaskRunStatusFields
	 */
	sidecars?: Array<SidecarState>;
	/**
	 * SpanContext contains tracing span context fields
	 * @type {{ [key: string]: string; }}
	 * @memberof TaskRunStatusFields
	 */
	spanContext?: { [key: string]: string };
	/**
	 *
	 * @type {IIoK8sApimachineryPkgApisMetaV1Time}
	 * @memberof TaskRunStatusFields
	 */
	startTime?: IIoK8sApimachineryPkgApisMetaV1Time;
	/**
	 * Steps describes the state of each build step container.
	 * @type {Array<StepState>}
	 * @memberof TaskRunStatusFields
	 */
	steps?: Array<StepState>;
	/**
	 *
	 * @type {TaskSpec}
	 * @memberof TaskRunStatusFields
	 */
	taskSpec?: TaskSpec;
}
/**
 * TaskRunStepSpec is used to override the values of a Step in the corresponding Task.
 * @export
 * @interface TaskRunStepSpec
 */
export interface TaskRunStepSpec {
	/**
	 *
	 * @type {ResourceRequirements}
	 * @memberof TaskRunStepSpec
	 */
	computeResources: ResourceRequirements;
	/**
	 * The name of the Step to override.
	 * @type {string}
	 * @memberof TaskRunStepSpec
	 */
	name: string;
}
/**
 * TaskSpec defines the desired state of Task.
 * @export
 * @interface TaskSpec
 */
export interface TaskSpec {
	/**
	 * Description is a user-facing description of the task that may be used to populate a UI.
	 * @type {string}
	 * @memberof TaskSpec
	 */
	description?: string;
	/**
	 * DisplayName is a user-facing name of the task that may be used to populate a UI.
	 * @type {string}
	 * @memberof TaskSpec
	 */
	displayName?: string;
	/**
	 * Params is a list of input parameters required to run the task. Params must be supplied as inputs in TaskRuns unless they declare a default value.
	 * @type {Array<ParamSpec>}
	 * @memberof TaskSpec
	 */
	params?: Array<ParamSpec>;
	/**
	 * Results are values that this Task can output
	 * @type {Array<TaskResult>}
	 * @memberof TaskSpec
	 */
	results?: Array<TaskResult>;
	/**
	 * Sidecars are run alongside the Task\'s step containers. They begin before the steps start and end after the steps complete.
	 * @type {Array<Sidecar>}
	 * @memberof TaskSpec
	 */
	sidecars?: Array<Sidecar>;
	/**
	 *
	 * @type {StepTemplate}
	 * @memberof TaskSpec
	 */
	stepTemplate?: StepTemplate;
	/**
	 * Steps are the steps of the build; each step is run sequentially with the source mounted into /workspace.
	 * @type {Array<Step>}
	 * @memberof TaskSpec
	 */
	steps?: Array<Step>;
	/**
	 * Volumes is a collection of volumes that are available to mount into the steps of the build.
	 * @type {Array<Volume>}
	 * @memberof TaskSpec
	 */
	volumes?: Array<Volume>;
	/**
	 * Workspaces are the volumes that this Task requires.
	 * @type {Array<WorkspaceDeclaration>}
	 * @memberof TaskSpec
	 */
	workspaces?: Array<WorkspaceDeclaration>;
}
/**
 * TimeoutFields allows granular specification of pipeline, task, and finally timeouts
 * @export
 * @interface TimeoutFields
 */
export interface TimeoutFields {
	/**
	 *
	 * @type {Duration}
	 * @memberof TimeoutFields
	 */
	finally?: Duration;
	/**
	 *
	 * @type {Duration}
	 * @memberof TimeoutFields
	 */
	pipeline?: Duration;
	/**
	 *
	 * @type {Duration}
	 * @memberof TimeoutFields
	 */
	tasks?: Duration;
}
/**
 * WhenExpression allows a PipelineTask to declare expressions to be evaluated before the Task is run to determine whether the Task should be executed or skipped
 * @export
 * @interface WhenExpression
 */
export interface WhenExpression {
	/**
	 * CEL is a string of Common Language Expression, which can be used to conditionally execute the task based on the result of the expression evaluation More info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md
	 * @type {string}
	 * @memberof WhenExpression
	 */
	cel?: string;
	/**
	 * Input is the string for guard checking which can be a static input or an output from a parent Task
	 * @type {string}
	 * @memberof WhenExpression
	 */
	input?: string;
	/**
	 * Operator that represents an Input\'s relationship to the values
	 * @type {string}
	 * @memberof WhenExpression
	 */
	operator?: string;
	/**
	 * Values is an array of strings, which is compared against the input, for guard checking It must be non-empty
	 * @type {Array<string>}
	 * @memberof WhenExpression
	 */
	values?: Array<string>;
}
/**
 * WorkspaceBinding maps a Task\'s declared workspace to a Volume.
 * @export
 * @interface WorkspaceBinding
 */
export interface WorkspaceBinding {
	/**
	 *
	 * @type {ConfigMapVolumeSource}
	 * @memberof WorkspaceBinding
	 */
	configMap?: ConfigMapVolumeSource;
	/**
	 *
	 * @type {CSIVolumeSource}
	 * @memberof WorkspaceBinding
	 */
	csi?: CSIVolumeSource;
	/**
	 *
	 * @type {EmptyDirVolumeSource}
	 * @memberof WorkspaceBinding
	 */
	emptyDir?: EmptyDirVolumeSource;
	/**
	 * Name is the name of the workspace populated by the volume.
	 * @type {string}
	 * @memberof WorkspaceBinding
	 */
	name: string;
	/**
	 *
	 * @type {PersistentVolumeClaimVolumeSource}
	 * @memberof WorkspaceBinding
	 */
	persistentVolumeClaim?: PersistentVolumeClaimVolumeSource;
	/**
	 *
	 * @type {ProjectedVolumeSource}
	 * @memberof WorkspaceBinding
	 */
	projected?: ProjectedVolumeSource;
	/**
	 *
	 * @type {SecretVolumeSource}
	 * @memberof WorkspaceBinding
	 */
	secret?: SecretVolumeSource;
	/**
	 * SubPath is optionally a directory on the volume which should be used for this binding (i.e. the volume will be mounted at this sub directory).
	 * @type {string}
	 * @memberof WorkspaceBinding
	 */
	subPath?: string;
	/**
	 *
	 * @type {PersistentVolumeClaim}
	 * @memberof WorkspaceBinding
	 */
	volumeClaimTemplate?: PersistentVolumeClaim;
}
/**
 * WorkspaceDeclaration is a declaration of a volume that a Task requires.
 * @export
 * @interface WorkspaceDeclaration
 */
export interface WorkspaceDeclaration {
	/**
	 * Description is an optional human readable description of this volume.
	 * @type {string}
	 * @memberof WorkspaceDeclaration
	 */
	description?: string;
	/**
	 * MountPath overrides the directory that the volume will be made available at.
	 * @type {string}
	 * @memberof WorkspaceDeclaration
	 */
	mountPath?: string;
	/**
	 * Name is the name by which you can bind the volume at runtime.
	 * @type {string}
	 * @memberof WorkspaceDeclaration
	 */
	name: string;
	/**
	 * Optional marks a Workspace as not being required in TaskRuns. By default this field is false and so declared workspaces are required.
	 * @type {boolean}
	 * @memberof WorkspaceDeclaration
	 */
	optional?: boolean;
	/**
	 * ReadOnly dictates whether a mounted volume is writable. By default this field is false and so mounted volumes are writable.
	 * @type {boolean}
	 * @memberof WorkspaceDeclaration
	 */
	readOnly?: boolean;
}
/**
 * WorkspacePipelineTaskBinding describes how a workspace passed into the pipeline should be mapped to a task\'s declared workspace.
 * @export
 * @interface WorkspacePipelineTaskBinding
 */
export interface WorkspacePipelineTaskBinding {
	/**
	 * Name is the name of the workspace as declared by the task
	 * @type {string}
	 * @memberof WorkspacePipelineTaskBinding
	 */
	name: string;
	/**
	 * SubPath is optionally a directory on the volume which should be used for this binding (i.e. the volume will be mounted at this sub directory).
	 * @type {string}
	 * @memberof WorkspacePipelineTaskBinding
	 */
	subPath?: string;
	/**
	 * Workspace is the name of the workspace declared by the pipeline
	 * @type {string}
	 * @memberof WorkspacePipelineTaskBinding
	 */
	workspace?: string;
}
/**
 * WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access to a Workspace defined in a Task.
 * @export
 * @interface WorkspaceUsage
 */
export interface WorkspaceUsage {
	/**
	 * MountPath is the path that the workspace should be mounted to inside the Step or Sidecar, overriding any MountPath specified in the Task\'s WorkspaceDeclaration.
	 * @type {string}
	 * @memberof WorkspaceUsage
	 */
	mountPath: string;
	/**
	 * Name is the name of the workspace this Step or Sidecar wants access to.
	 * @type {string}
	 * @memberof WorkspaceUsage
	 */
	name: string;
}
