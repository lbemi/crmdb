"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolve = exports.NumberStringUnionResolver = exports.ImplicitTokenResolver = exports.LazyResolver = exports.ResolutionContext = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const app_1 = require("./app");
const lazy_1 = require("./lazy");
/**
 * Context object for a specific resolution process.
 */
class ResolutionContext {
    constructor(
    /**
     * Which ApiObject is currently being resolved.
     */
    obj, 
    /**
     * Which key is currently being resolved.
     */
    key, 
    /**
     * The value associated to the key currently being resolved.
     */
    value) {
        this.obj = obj;
        this.key = key;
        this.value = value;
        /**
         * Whether or not the value was replaced by invoking the `replaceValue` method.
         */
        this.replaced = false;
    }
    /**
     * Replaces the original value in this resolution context
     * with a new value. The new value is what will end up in the manifest.
     */
    replaceValue(newValue) {
        this.replacedValue = newValue;
        this.replaced = true;
    }
}
exports.ResolutionContext = ResolutionContext;
_a = JSII_RTTI_SYMBOL_1;
ResolutionContext[_a] = { fqn: "cdk8s.ResolutionContext", version: "2.68.60" };
/**
 * Resolvers instanecs of `Lazy`.
 */
class LazyResolver {
    resolve(context) {
        if (context.value instanceof lazy_1.Lazy) {
            const resolved = context.value.produce();
            context.replaceValue(resolved);
        }
    }
}
exports.LazyResolver = LazyResolver;
_b = JSII_RTTI_SYMBOL_1;
LazyResolver[_b] = { fqn: "cdk8s.LazyResolver", version: "2.68.60" };
/**
 * Resolves implicit tokens.
 */
class ImplicitTokenResolver {
    resolve(context) {
        if (typeof (context.value.resolve) === 'function') {
            const resolved = context.value.resolve();
            context.replaceValue(resolved);
        }
    }
}
exports.ImplicitTokenResolver = ImplicitTokenResolver;
_c = JSII_RTTI_SYMBOL_1;
ImplicitTokenResolver[_c] = { fqn: "cdk8s.ImplicitTokenResolver", version: "2.68.60" };
/**
 * Resolves union types that allow using either number or string (as generated by the CLI).
 *
 * E.g IntOrString, Quantity, ...
 */
class NumberStringUnionResolver {
    resolve(context) {
        if (context.value.constructor === Object) {
            // we only want to resolve union classes, not plain dictionaries
            return;
        }
        if (NumberStringUnionResolver.TYPES.includes(typeof (context.value.value))) {
            // replace with a dictionary because the L1 proceeds to access the .value
            // property after resolution.
            context.replaceValue({ value: context.value.value });
        }
    }
}
exports.NumberStringUnionResolver = NumberStringUnionResolver;
_d = JSII_RTTI_SYMBOL_1;
NumberStringUnionResolver[_d] = { fqn: "cdk8s.NumberStringUnionResolver", version: "2.68.60" };
NumberStringUnionResolver.TYPES = ['number', 'string'];
/**
 * Resolves any value attached to a specific ApiObject.
 */
function resolve(key, value, apiObject) {
    const resolvers = app_1.App.of(apiObject).resolvers;
    if (value == null) {
        return value;
    }
    // give dibs to the resolvers as they are more specific
    const context = new ResolutionContext(apiObject, key, value);
    for (const resolver of resolvers) {
        resolver.resolve(context);
        if (context.replaced) {
            // stop when the first resolver replaces the value.
            return resolve(key, context.replacedValue, apiObject);
        }
    }
    // array - resolve each element
    if (Array.isArray(value)) {
        return value.map((x, i) => resolve([...key, `${i}`], x, apiObject));
    }
    // dictionrary - resolve leafs
    if (value.constructor == Object) {
        const result = {};
        for (const [k, v] of Object.entries(value)) {
            result[k] = resolve([...key, k], v, apiObject);
        }
        return result;
    }
    return value;
}
exports.resolve = resolve;
//# sourceMappingURL=data:application/json;base64,