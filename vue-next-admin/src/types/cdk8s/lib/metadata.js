"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiObjectMetadataDefinition = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const _util_1 = require("./_util");
const resolve_1 = require("./resolve");
/**
 * Object metadata.
 */
class ApiObjectMetadataDefinition {
    constructor(options) {
        this.name = options.name;
        this.labels = { ...options.labels } ?? {};
        this.annotations = { ...options.annotations } ?? {};
        this.namespace = options.namespace;
        this.finalizers = options.finalizers ? [...options.finalizers] : [];
        this.ownerReferences = options.ownerReferences ? [...options.ownerReferences] : [];
        this.apiObject = options.apiObject;
        this._additionalAttributes = options;
        // otherwise apiObject is passed to the resolving logic, which expectadly fails
        delete this._additionalAttributes.apiObject;
    }
    /**
     * Add a label.
     *
     * @param key - The key.
     * @param value - The value.
     */
    addLabel(key, value) {
        this.labels[key] = value;
    }
    /**
     * @returns a value of a label or undefined
     * @param key the label
     */
    getLabel(key) {
        return this.labels[key];
    }
    /**
     * Add an annotation.
     *
     * @param key - The key.
     * @param value - The value.
     */
    addAnnotation(key, value) {
        this.annotations[key] = value;
    }
    /**
     * Add one or more finalizers.
     *
     * @param finalizers the finalizers
     */
    addFinalizers(...finalizers) {
        this.finalizers.push(...finalizers);
    }
    /**
     * Add an owner.
     *
     * @param owner the owner
     */
    addOwnerReference(owner) {
        this.ownerReferences.push(owner);
    }
    /**
     * Adds an arbitrary key/value to the object metadata.
     * @param key Metadata key
     * @param value Metadata value
     */
    add(key, value) {
        this._additionalAttributes[key] = value;
    }
    /**
     * Synthesizes a k8s ObjectMeta for this metadata set.
     */
    toJson() {
        const sanitize = (x) => (0, _util_1.sanitizeValue)(x, { filterEmptyArrays: true, filterEmptyObjects: true });
        return sanitize((0, resolve_1.resolve)([], {
            ...this._additionalAttributes,
            name: this.name,
            namespace: this.namespace,
            annotations: this.annotations,
            finalizers: this.finalizers,
            ownerReferences: this.ownerReferences,
            labels: this.labels,
        }, this.apiObject));
    }
}
exports.ApiObjectMetadataDefinition = ApiObjectMetadataDefinition;
_a = JSII_RTTI_SYMBOL_1;
ApiObjectMetadataDefinition[_a] = { fqn: "cdk8s.ApiObjectMetadataDefinition", version: "2.68.60" };
//# sourceMappingURL=data:application/json;base64,