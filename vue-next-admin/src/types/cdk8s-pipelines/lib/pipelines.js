"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineRun = exports.Pipeline = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk8s_1 = require("cdk8s");
const common_1 = require("./common");
/**
 * The Pipeline allows you to specify Tasks that use Parameters and Workspaces
 * to accomplish complex tasks on the cluster.
 *
 * @see https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline
 * @schema Pipeline
 */
class Pipeline extends cdk8s_1.ApiObject {
    /**
     * Renders a Kubernetes manifest for "Pipeline".
     *
     * This can be used to inline resource manifests inside other objects (e.g. as templates).
     *
     * @param props initialization props
     */
    static manifest(props = {}) {
        return {
            ...Pipeline.GVK,
            ...props,
        };
    }
    /**
     * Defines a "Pipeline" API object
     * @param scope the scope in which to define this object
     * @param id a scope-local name for the object
     * @param props initialization props
     */
    constructor(scope, id, props = {}) {
        super(scope, id, {
            ...Pipeline.GVK,
        });
        this._metadata = props.metadata;
        this._spec = props.spec;
    }
    /**
     * Renders the object to Kubernetes JSON.
     */
    toJson() {
        const result = {
            ...Pipeline.GVK,
            ...{
                metadata: this._metadata,
                spec: this._spec,
            },
        };
        return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({
            ...r,
            [i[0]]: i[1],
        }), {});
    }
}
_a = JSII_RTTI_SYMBOL_1;
Pipeline[_a] = { fqn: "cdk8s-pipelines.Pipeline", version: "0.0.16" };
/**
 * Returns the apiVersion and kind for "Pipeline"
 */
Pipeline.GVK = {
    apiVersion: common_1.TektonV1ApiVersion,
    kind: 'Pipeline',
};
exports.Pipeline = Pipeline;
/**
 * The PipelineRun allows you to specify how you want to execute a `Pipeline`.
 *
 * @see https://tekton.dev/docs/pipelines/pipelineruns/
 * @schema PipelineRun
 */
class PipelineRun extends cdk8s_1.ApiObject {
    /**
     * Renders a Kubernetes manifest for `PipelineRun`.
     *
     * This can be used to inline resource manifests inside other objects (e.g. as templates).
     *
     * @param props initialization props
     */
    static manifest(props = {}) {
        return {
            ...PipelineRun.GVK,
            ...props,
        };
    }
    /**
     * Defines a `PipelineRun` API object
     * @param scope the scope in which to define this object
     * @param id a scope-local name for the object
     * @param props initialization props
     */
    constructor(scope, id, props = {}) {
        super(scope, id, {
            ...PipelineRun.GVK,
        });
        this._metadata = props.metadata;
        this._spec = props.spec;
    }
    /**
     * Renders the object to Kubernetes JSON.
     */
    toJson() {
        const result = {
            ...PipelineRun.GVK,
            ...{
                metadata: this._metadata,
                spec: this._spec,
            },
        };
        return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({
            ...r,
            [i[0]]: i[1],
        }), {});
    }
}
_b = JSII_RTTI_SYMBOL_1;
PipelineRun[_b] = { fqn: "cdk8s-pipelines.PipelineRun", version: "0.0.16" };
/**
 * Returns the apiVersion and kind for "PipelineRun"
 */
PipelineRun.GVK = {
    apiVersion: common_1.TektonV1ApiVersion,
    kind: 'PipelineRun',
};
exports.PipelineRun = PipelineRun;
//# sourceMappingURL=data:application/json;base64,