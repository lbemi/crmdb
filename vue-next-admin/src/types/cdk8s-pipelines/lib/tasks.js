"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = exports.TaskRef = exports.valueFrom = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * This file includes the basic objects for creating Tasks and dependencies.
 * While cdk8s supports generating this file from the CRD, the Tekton CRD at
 * the moment does not have the fields specified. See https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml,
 * specifically here:
 *       schema:
 *         openAPIV3Schema:
 *           type: object
 *           # OpenAPIV3 schema allows Kubernetes to perform validation on the schema fields
 *           # and use the schema in tooling such as `kubectl explain`.
 *           # Using "x-kubernetes-preserve-unknown-fields: true"
 *           # at the root of the schema (or within it) allows arbitrary fields.
 *           # We currently perform our own validation separately.
 *           # See https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#specifying-a-structural-schema
 *           # for more info.
 *           x-kubernetes-preserve-unknown-fields: true
 * For the time being, these objects are created manually using the latest
 * Tekton documentation as a reference.
 */
const cdk8s_1 = require("cdk8s");
const common_1 = require("./common");
/**
 * Creates an `env` source that can be used in the `env`'s `valueFrom`.
 * @param nk The name and key pair.
 */
function valueFrom(nk) {
    return {
        secretKeyRef: nk,
    };
}
exports.valueFrom = valueFrom;
/**
 * A `Task` reference. Will be generated as a `taskRef`.
 */
class TaskRef {
    constructor(name) {
        this.name = name;
    }
}
_a = JSII_RTTI_SYMBOL_1;
TaskRef[_a] = { fqn: "cdk8s-pipelines.TaskRef", version: "0.0.16" };
exports.TaskRef = TaskRef;
/**
 * A Tekton Task, which is
 * > a collection of Steps that you define and arrange in
 * > a specific order of execution as part of your continuous integration flow. A
 * > Task executes as a Pod on your Kubernetes cluster. A Task is available within a
 * > specific namespace, while a ClusterTask is available across the entire
 * > cluster.
 *
 * @see https://tekton.dev/docs/pipelines/tasks/
 */
class Task extends cdk8s_1.ApiObject {
    /**
     * Renders a Kubernetes manifest for "Task".
     *
     * This can be used to inline resource manifests inside other objects (e.g. as templates).
     *
     * @param props initialization props
     */
    static manifest(props = {}) {
        return {
            ...Task.GVK,
            ...props,
        };
    }
    /**
     * The configuration for the `Task`.
     */
    get spec() {
        return this._spec;
    }
    /**
     * Defines a "Task" API object
     * @param scope the scope in which to define this object
     * @param id a scope-local name for the object
     * @param props initialization props
     */
    constructor(scope, id, props = {}) {
        super(scope, id, {
            ...Task.GVK,
            ...props,
        });
        this._metadata = props.metadata;
        this._spec = props.spec;
    }
    /**
     * Renders the object to Kubernetes JSON.
     */
    toJson() {
        const result = {
            ...Task.GVK,
            ...{
                metadata: this._metadata,
                spec: this._spec,
            },
        };
        return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({
            ...r,
            [i[0]]: i[1],
        }), {});
    }
}
_b = JSII_RTTI_SYMBOL_1;
Task[_b] = { fqn: "cdk8s-pipelines.Task", version: "0.0.16" };
/**
 * Returns the apiVersion and kind for "Task"
 */
Task.GVK = {
    apiVersion: common_1.TektonV1ApiVersion,
    kind: 'Task',
};
exports.Task = Task;
//# sourceMappingURL=data:application/json;base64,